### 解题思路

此处撰写解题思路

### 代码

* java

```java
class Solution {
    public int maxSubArray(int[] nums) {
        //动态规划
        if(nums.length == 0)return 0;

        int[] dp = new int[nums.length + 1];//dp[i]表示前i个元素的最大子数组和
        //初始化
        dp[0] = 0;//边界条件
        int max = Integer.MIN_VALUE;
        for(int i = 1;i<=nums.length;i++){
            //如果前i-1个元素的最大子数组和 加上自己 减少的话 那就不如直接从自己开始出发
            dp[i] = Math.max(nums[i-1],dp[i-1]+nums[i-1]);
            if(dp[i] > max) max = dp[i];
        }
        return max;
    }
}
```

